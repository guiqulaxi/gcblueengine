#include <pybind11-global/pybind11/pybind11.h>
#include <pybind11-global/pybind11/eval.h>
#include <pybind11-global/pybind11/embed.h>
#include <ScriptedTaskInterface.h>
#include "tcFlightPortInterface.h"
#include "BlackboardItem.h"
#include "tcPlatformInterface.h"
#include "tcMissionInterface.h"
#include "tcGroupInterface.h"
#include "tcTrackInterface.h"
#include "BlackboardInterface.h"
#include "tcWeaponInterface.h"
#include "tcScenarioInterface.h"
#include "tcGoal.h"
using namespace scriptinterface ;
namespace py = pybind11;
using namespace py;
//内嵌模块
PYBIND11_EMBEDDED_MODULE(gcblue, m) {
    py::class_<tcFlightUnitStatus>(m, "FlightUnitStatus")
        .def_readonly("name", &tcFlightUnitStatus::unit_name)
        .def_readonly("current_loc", &tcFlightUnitStatus::current_loc)
        .def_readonly("goal_loc", &tcFlightUnitStatus::goal_loc)
        .def_readonly("atDestination", &tcFlightUnitStatus::atDestination)
        .def_readonly("isIdle", &tcFlightUnitStatus::isIdle)
        .def_readonly("runway", &tcFlightUnitStatus::runway)
        .def_readonly("ready_time", &tcFlightUnitStatus::ready_time);

    py::class_<tcFlightPortInterface>(m,"FlightPortInterface")
        .def(py::init<>())
        .def("GetCurrentTime",&tcFlightPortInterface::GetTime)
        .def("GetUnitCount", &tcFlightPortInterface::GetUnitCount)
        .def("GetUnitID", &tcFlightPortInterface::GetUnitID)
        .def("GetUnitName", &tcFlightPortInterface::GetUnitName)
        .def("GetUnitStatus", &tcFlightPortInterface::GetUnitStatus)
        .def("GetUnitLocation", &tcFlightPortInterface::GetUnitLocation)
        .def("GetUnitGoalLocation", &tcFlightPortInterface::GetUnitGoalLocation)
        .def("GetUnitPlatformInterface", &tcFlightPortInterface::GetUnitPlatformInterface)
        .def("IsValid", &tcFlightPortInterface::IsValid)
        .def("Launch", &tcFlightPortInterface::Launch)
        .def("LaunchID", &tcFlightPortInterface::LaunchID)
        .def("SetDestination", &tcFlightPortInterface::SetDestination)
        .def("GetLocalObj",&tcFlightPortInterface::GetLocalObj)
        // mission related commands
        .def("AddGenericMission", &tcFlightPortInterface::AddGenericMission)
        .def("AddAircraftToMission", &tcFlightPortInterface::AddAircraftToMission)
        .def("AddCAPMission", &tcFlightPortInterface::AddCAPMission)
        .def("AddAEWMission", &tcFlightPortInterface::AddAEWMission)
        .def("AddASWMission", &tcFlightPortInterface::AddASWMission)
        .def("AddAttackMission", &tcFlightPortInterface::AddAttackMission)
        .def("GetMissionCount", &tcFlightPortInterface::GetMissionCount)
        .def("GetMissionId", &tcFlightPortInterface::GetMissionId)
        .def("GetEditMissionId", &tcFlightPortInterface::GetEditMissionId)
        .def("SetEditMissionId", &tcFlightPortInterface::SetEditMissionId)
        .def("AddMissionWaypoint", &tcFlightPortInterface::AddMissionWaypoint)
        .def("AddMissionWaypointAdvanced", &tcFlightPortInterface::AddMissionWaypointAdvanced)
        .def("EditMissionWaypoint", &tcFlightPortInterface::EditMissionWaypoint)
        .def("EditMissionWaypointAdvanced", &tcFlightPortInterface::EditMissionWaypointAdvanced)
        .def("EditMissionWaypointReference", &tcFlightPortInterface::EditMissionWaypointReference)
        .def("GetMissionWaypointCount", &tcFlightPortInterface::GetMissionWaypointCount)
        .def("InsertMissionWaypoint", &tcFlightPortInterface::InsertMissionWaypoint)
        .def("ClearMissionWaypoints", &tcFlightPortInterface::ClearMissionWaypoints)
        .def("DeleteMissionWaypoint", &tcFlightPortInterface::DeleteMissionWaypoint)
        .def("SetMissionWaypointTasks", &tcFlightPortInterface::SetMissionWaypointTasks)
        .def("AddMissionWaypointTask", &tcFlightPortInterface::AddMissionWaypointTask)
        .def("RemoveMissionWaypointTask", &tcFlightPortInterface::RemoveMissionWaypointTask)
        .def("SetMissionDatum", &tcFlightPortInterface::SetMissionDatum)
        .def("SetMissionLandingTarget", &tcFlightPortInterface::SetMissionLandingTarget)
        .def("SetMissionLaunchTime", &tcFlightPortInterface::SetMissionLaunchTime)
        .def("SetMissionPatrolArea", &tcFlightPortInterface::SetMissionPatrolArea)
        .def("GetMissionPatrolArea", &tcFlightPortInterface::GetMissionPatrolArea)
        .def("SetMissionPatrolAnchor", &tcFlightPortInterface::SetMissionPatrolAnchor)
        .def("SetMissionType", &tcFlightPortInterface::SetMissionType)
        .def("GetMissionType", &tcFlightPortInterface::GetMissionType)
        .def("TransformToRelativePatrolArea", &tcFlightPortInterface::TransformToRelativePatrolArea)
        .def("TransformToAbsolutePatrolArea", &tcFlightPortInterface::TransformToAbsolutePatrolArea)
        .def("SetMissionWaveQuantity", &tcFlightPortInterface::SetMissionWaveQuantity)
        .def("HasAircraftForMission", &tcFlightPortInterface::HasAircraftForMission)
        ;


    py::class_<tcMissionInterface>(m,"MissionInterface")

        .def("IsValid", &tcMissionInterface::IsValid)
        .def("GetAirborneAircraftCount", &tcMissionInterface::GetAirborneAircraftCount)
        .def("GetAirborneAircraftId", &tcMissionInterface::GetAirborneAircraftId)
        .def("GetMissionAircraftCount", &tcMissionInterface::GetMissionAircraftCount)
        .def("GetSmallestWaypointIndex", &tcMissionInterface::GetSmallestWaypointIndex)
        .def("GetLocalObj", &tcMissionInterface::GetLocalObj)
        ;
    class_<BlackboardInterface>(m,"BlackboardInterface")
        .def_readonly("author", &BlackboardInterface::author)
        .def_readonly("priority", &BlackboardInterface::priority)
        .def("Erase", &BlackboardInterface::Erase)
        .def("KeyExists", &BlackboardInterface::KeyExists)
        .def("Read", &BlackboardInterface::Read)
        .def("ReadAuthor", &BlackboardInterface::ReadAuthor)
        .def("ReadMessage", &BlackboardInterface::ReadMessage)
        .def("ReadPriority", &BlackboardInterface::ReadPriority)
        .def("Write", &BlackboardInterface::Write)
        .def("WriteGlobal", &BlackboardInterface::WriteGlobal)
        ;

    py::class_<tcPlatformInterface>(m,"UnitInfoClass")
        .def(py::init<>())
        // navigation related commands
        .def("GetLongitude", &tcPlatformInterface::GetLongitude)
        .def("GetLatitude", &tcPlatformInterface::GetLatitude)
        .def("GetAlt", &tcPlatformInterface::GetAltitude)
        .def("GetAltitude", &tcPlatformInterface::GetAltitude)
        .def("GetFuel", &tcPlatformInterface::GetFuel)
        .def("GetMaxAlt", &tcPlatformInterface::GetMaxAltitude)
        .def("GetMaxAltitude", &tcPlatformInterface::GetMaxAltitude)
        .def("GetSpeed",&tcPlatformInterface::GetSpeed)
        .def("GetCruiseAltitude", &tcPlatformInterface::GetCruiseAltitude)
        .def("GetCruiseSpeedForAltitude", &tcPlatformInterface::GetCruiseSpeedForAltitude)
        .def("GetCruiseRangeForAltitude", &tcPlatformInterface::GetCruiseRangeForAltitude)
        .def("GetStallSpeedForAltitude", &tcPlatformInterface::GetStallSpeedForAltitude)
        .def("GetMaxSpeed",&tcPlatformInterface::GetMaxSpeed)
        .def("GetMaxSpeedForAltitude",&tcPlatformInterface::GetMaxSpeedForAltitude)
        .def("GetMaxSpeedForAltitudeAB",&tcPlatformInterface::GetMaxSpeedForAltitudeAB)
        .def("GetThrottle", &tcPlatformInterface::GetThrottle)
        .def("GetHeading",&tcPlatformInterface::GetHeading)
        .def("GetHeadingRad",&tcPlatformInterface::GetHeadingRad)
        .def("GetHeadingToDatum",&tcPlatformInterface::GetHeadingToDatum)
        .def("GetRangeToDatum",&tcPlatformInterface::GetRangeToDatum)
        .def("GetTerrainElevation",&tcPlatformInterface::GetTerrainElevation)
        .def("GetMapTerrainElevation",&tcPlatformInterface::GetMapTerrainElevation)
        .def("HasThrottle",&tcPlatformInterface::HasThrottle)
        .def("SetAlt", &tcPlatformInterface::SetAltitude)
        .def("SetAltitude", &tcPlatformInterface::SetAltitude)
        .def("SetLongitude", &tcPlatformInterface::SetLongitude)
        .def("SetLatitude", &tcPlatformInterface::SetLatitude)
        .def("SetPitchLimit", &tcPlatformInterface::SetPitchLimitDeg)
        .def("SetClimbDeg", &tcPlatformInterface::SetClimbDeg)
        .def("GetClimbDeg", &tcPlatformInterface::GetClimbDeg)
        .def("SetClimbRad", &tcPlatformInterface::SetClimbRad)
        .def("CalculateBombElevationDeg", &tcPlatformInterface::CalculateBombElevationDeg)
        .def("EstimateMissileRangeKm", &tcPlatformInterface::EstimateMissileRangeKm)
        .def("SetMaxTurnRate", &tcPlatformInterface::SetMaxTurnRate)
        .def("SetSpeed", &tcPlatformInterface::SetSpeed)
        .def("SetSpeedToMax", &tcPlatformInterface::SetSpeedToMax)
        .def("SetThrottle",&tcPlatformInterface::SetThrottle)
        .def("SetHeading", &tcPlatformInterface::SetHeading)
        .def("SetHeadingRad", &tcPlatformInterface::SetHeadingRad)

        // formation
        .def("SetFormationLeader", &tcPlatformInterface::SetFormationLeader)
        .def("IsInFormation", &tcPlatformInterface::IsInFormation)
        .def("IsFormationLeader", &tcPlatformInterface::IsFormationLeader)
        .def("SetFormationEdit", &tcPlatformInterface::SetFormationEdit)
        .def("GetFormationLeader", &tcPlatformInterface::GetFormationLeader)
        //        .def("GetFormationEditId", &tcPlatformInterface::GetFormationEditId)
        .def("SetFormationPosition", &tcPlatformInterface::SetFormationPosition)
        .def("GetFormationPosition", &tcPlatformInterface::GetFormationPosition)
        .def("SetFormationAltitudeOffset", &tcPlatformInterface::SetFormationAltitudeOffset)
        .def("GetFormationAltitudeOffset", &tcPlatformInterface::GetFormationAltitudeOffset)
        .def("SetFormationMode", &tcPlatformInterface::SetFormationMode)
        .def("GetFormationMode", &tcPlatformInterface::GetFormationMode)
        .def("SetFormationUseNorthBearing", &tcPlatformInterface::SetFormationUseNorthBearing)
        .def("IsFormationUsingNorthBearing", &tcPlatformInterface::IsFormationUsingNorthBearing)

        // platform information
        .def("GetName", &tcPlatformInterface::GetPlatformName)
        .def("GetPlatformName", &tcPlatformInterface::GetPlatformName)
        .def("GetClass", &tcPlatformInterface::GetPlatformClass)
        .def("GetPlatformClass", &tcPlatformInterface::GetPlatformClass)
        .def("GetPlatformId", &tcPlatformInterface::GetPlatformId)
        .def("GetPlatformAlliance", &tcPlatformInterface::GetPlatformAlliance)
        .def("IsSurface", &tcPlatformInterface::IsSurface)
        .def("IsAir", &tcPlatformInterface::IsAir)
        .def("IsFixed", &tcPlatformInterface::IsFixed)
        .def("IsGroundVehicle", &tcPlatformInterface::IsGroundVehicle)
        .def("IsHelo", &tcPlatformInterface::IsHelo)
        .def("IsSub", &tcPlatformInterface::IsSub)
        .def("SetActionText", &tcPlatformInterface::SetActionText)
        .def("GetSubInterface", &tcPlatformInterface::GetSubInterface)

        // weapons and targeting
        .def("GetTarget",&tcPlatformInterface::GetTarget)
        .def("SetTarget",&tcPlatformInterface::SetTarget)
        .def("GetRangeToTarget",&tcPlatformInterface::GetRangeToTarget)
        .def("SetHeadingToInterceptTarget",&tcPlatformInterface::SetHeadingToInterceptTarget)
        .def("GetTargetTrackInfo",&tcPlatformInterface::GetTargetTrackInfo)
        .def("GetLauncherCount",&tcPlatformInterface::GetLauncherCount)
        .def("GetLauncherWeaponName",&tcPlatformInterface::GetLauncherWeaponName)
        .def("GetBestLauncher",&tcPlatformInterface::GetBestLauncher)
        .def("GetLauncherInfo", &tcPlatformInterface::GetLauncherInfoByValue)
        .def("GetLauncherStatus", &tcPlatformInterface::GetLauncherStatus)
        .def("IsTargetInRange", &tcPlatformInterface::IsTargetInRange)
        .def("SendDatumToLauncher", &tcPlatformInterface::SendDatumToLauncher)
        .def("HandoffTargetToLauncher", &tcPlatformInterface::HandoffTargetToLauncher)
        .def("SendTargetToLauncher", &tcPlatformInterface::SendTargetToLauncher)
        .def("IsLauncherEffective", &tcPlatformInterface::IsLauncherEffective)
        .def("IsEquippedForTargetType", &tcPlatformInterface::IsEquippedForTargetType)
        .def("Launch", &tcPlatformInterface::Launch)
        .def("GetLauncherQuantity", &tcPlatformInterface::GetLauncherQuantity)
        .def("IsDatumLaunch", &tcPlatformInterface::IsDatumLaunch)
        .def("GetLauncherInterceptTime", &tcPlatformInterface::GetLauncherInterceptTime)
        .def("GetFireControlInfo", &tcPlatformInterface::GetFireControlInfo)

        .def("GetLauncherTypesCount", &tcPlatformInterface::GetLauncherTypesCount)
        .def("GetLauncherTypeName", &tcPlatformInterface::GetLauncherTypeName)
        .def("CanMagazineAcceptItem", &tcPlatformInterface::CanMagazineAcceptItem)
        .def("GetMagazineQuantity", &tcPlatformInterface::GetMagazineQuantity)
        .def("GetMagazineIdQuantity", &tcPlatformInterface::GetMagazineIdQuantity)
        .def("HasMagazine", &tcPlatformInterface::HasMagazine)
        .def("GetMagazineItems", &tcPlatformInterface::GetMagazineItems)
        .def("SetMagazineEmpty", &tcPlatformInterface::SetMagazineEmpty)
        .def("AddItemToMagazine", &tcPlatformInterface::AddItemToMagazine)
        .def("GetCompatibleItemList", &tcPlatformInterface::GetCompatibleItemList)
        .def("LoadLauncher", &tcPlatformInterface::LoadLauncher)
        .def("GetItemCapacityForLauncher", &tcPlatformInterface::GetItemCapacityForLauncher)
        .def("LoadLauncherTest", &tcPlatformInterface::LoadLauncherTest)
        .def("UnloadLauncher", &tcPlatformInterface::UnloadLauncher)
        .def("LoadOther", &tcPlatformInterface::LoadOther)
        .def("MaintenanceHold", &tcPlatformInterface::MaintenanceHold)
        .def("GetEquipmentListByClass", &tcPlatformInterface::GetEquipmentListByClass)
        .def("GetLoadoutList", &tcPlatformInterface::GetLoadoutList)
        .def("EquipLoadout", &tcPlatformInterface::EquipLoadout)
        .def("GetPlatformSetups", &tcPlatformInterface::GetPlatformSetups)
        .def("AutoConfigurePlatform", &tcPlatformInterface::AutoConfigurePlatform)
        .def("IsRefueling", &tcPlatformInterface::IsRefueling)
        .def("GetWeightMargin", &tcPlatformInterface::GetWeightMargin)
        .def("CanRefuelInFlight", &tcPlatformInterface::CanRefuelInFlight)
        .def("StartRefuelWith", &tcPlatformInterface::StartRefuelWith)
        .def("IsTankerAircraft", &tcPlatformInterface::IsTankerAircraft)
        .def("GetTankerSpotsFree", &tcPlatformInterface::GetTankerSpotsFree)

        // task interface commands
        .def("AddNavWaypoint", &tcPlatformInterface::AddNavWaypoint)
        .def("AddNavWaypointAdvanced", &tcPlatformInterface::AddNavWaypointAdvanced)
        .def("EditNavWaypoint", &tcPlatformInterface::EditNavWaypoint)
        .def("EditNavWaypointAdvanced", &tcPlatformInterface::EditNavWaypointAdvanced)
        .def("EditNavWaypointReference", &tcPlatformInterface::EditNavWaypointReference)
        .def("InsertNavWaypoint", &tcPlatformInterface::InsertNavWaypoint)
        .def("DeleteNavWaypoint", &tcPlatformInterface::DeleteNavWaypoint)
        .def("GetCurrentWaypoint", &tcPlatformInterface::GetCurrentWaypoint)
        .def("SetCurrentWaypoint", &tcPlatformInterface::SetCurrentWaypoint)
        .def("SetNavLoopState", &tcPlatformInterface::SetNavLoopState)
        .def("GetNavLoopState", &tcPlatformInterface::GetNavLoopState)
        .def("SetNavWaypointTasks", &tcPlatformInterface::SetNavWaypointTasks)
        .def("AddWaypointTask", &tcPlatformInterface::AddWaypointTask)
        .def("RemoveWaypointTask", &tcPlatformInterface::RemoveWaypointTask)
        .def("GetMissionInfo", &tcPlatformInterface::GetMissionInfo)
        .def("GetRandomPatrolPoint", &tcPlatformInterface::GetRandomPatrolPoint)

        .def("AddTask", &tcPlatformInterface::AddTask)
        .def("ClearTasks", &tcPlatformInterface::ClearTasks)
        .def("DeleteTask", &tcPlatformInterface::DeleteTask)
        .def("SetTaskRun", &tcPlatformInterface::SetTaskRun)
        .def("GetBlackboardInterface", &tcPlatformInterface::GetBlackboardInterface)
        .def("TaskExists", &tcPlatformInterface::TaskExists)
        .def("GetTaskList", &tcPlatformInterface::GetTaskList)

        // TODO why is this exposed??
        .def("GetLocalObj",&tcPlatformInterface::GetLocalObj)

        // sensors
        .def("GetFirstTrack",&tcPlatformInterface::GetFirstTrack)
        .def("GetClosestAirTrack",&tcPlatformInterface::GetClosestAirTrack)
        .def("GetClosestSurfaceTrack",&tcPlatformInterface::GetClosestSurfaceTrack)
        .def("GetClosestMissileTrack",&tcPlatformInterface::GetClosestMissileTrack)
        .def("GetClosestTrack",&tcPlatformInterface::GetClosestTrack)
        .def("SetAllSensorState",&tcPlatformInterface::SetAllSensorState)
        .def("GetSensorCount",&tcPlatformInterface::GetSensorCount)
        .def("GetSensorInfo",&tcPlatformInterface::GetSensorInfo)
        .def("SetSensorState",&tcPlatformInterface::SetSensorState)
        .def("GetInterceptHeadingToTrack",&tcPlatformInterface::GetInterceptHeadingToTrack)
        .def("GetRangeToTrack",&tcPlatformInterface::GetRangeToTrack)
        .def("SetHeadingToInterceptTrack",&tcPlatformInterface::SetHeadingToInterceptTrack)
        .def("GetTrackById",&tcPlatformInterface::GetTrackById)
        .def("GetTrackList",&tcPlatformInterface::GetTrackList)
        .def("GetFriendlyTrackList",&tcPlatformInterface::GetFriendlyTrackList)

        // flightport, landing
        .def("GetLandingState",&tcPlatformInterface::GetLandingState)
        .def("SetLandingState",&tcPlatformInterface::SetLandingState)
        .def("HasFlightPort",&tcPlatformInterface::HasFlightPort)
        .def("GetFlightPortInfo",&tcPlatformInterface::GetFlightPortInfo)
        .def("GetLandingData", &tcPlatformInterface::GetLandingData)
        //            .def("GetUserInput",&tcPlatformInterface::GetUserInput)
        //            .def("SendCommand",&tcPlatformInterface::SendCommand)

        // multiplayer related
        .def("GetController", &tcPlatformInterface::GetController)
        .def("IsAvailable", &tcPlatformInterface::IsAvailable)
        .def("IsMultiplayerActive", &tcPlatformInterface::IsMultiplayerActive)
        .def("ReleaseControl", &tcPlatformInterface::ReleaseControl)
        .def("TakeControl", &tcPlatformInterface::TakeControl)

        // miscellaneous
        .def("GetTime", &tcPlatformInterface::GetTime)
        .def("LookupFriendlyId", &tcPlatformInterface::LookupFriendlyId)
        .def("LookupFriendlyName", &tcPlatformInterface::LookupFriendlyName)
        //        .def("DisplayMessage",&tcPlatformInterface::DisplayMessage)
        //        .def("DisplayPopupMessage", &tcPlatformInterface::DisplayPopupMessage)
        .def("IsPlayerControlled", &tcPlatformInterface::IsPlayerControlled)
        .def("IsValid",&tcPlatformInterface::IsValid)
        .def("PlaySound",&tcPlatformInterface::PlaySound)
        .def("Rand",&tcPlatformInterface::GetRand)
        .def("GetROE", &tcPlatformInterface::GetROE)
        .def("QueryDatabase", &tcPlatformInterface::QueryDatabase)

        // mission editor mode and dev tool mode
        .def("DeletePlatform", &tcPlatformInterface::DeletePlatform)
        .def("MovePlatform", &tcPlatformInterface::MovePlatform)
        .def("RenamePlatform", &tcPlatformInterface::RenamePlatform)
        .def("IsDeveloperMode", &tcPlatformInterface::IsDeveloperMode)
        .def("SetInvulnerable", &tcPlatformInterface::SetInvulnerable)
        .def("LaunchAtMe", &tcPlatformInterface::LaunchAtMe)
        .def("SetTestParameter", &tcPlatformInterface::SetTestParameter)
        .def("ApplyDamage", &tcPlatformInterface::ApplyDamage)
        .def("ApplyAdvancedDamage", &tcPlatformInterface::ApplyAdvancedDamage)
        .def("GetPlatformListByClass", &tcPlatformInterface::GetPlatformListByClass)
        .def("GetPlatformNameList", &tcPlatformInterface::GetPlatformNameList)
        .def("GetUnitInterface", &tcPlatformInterface::GetUnitInterface)
        .def("GetScenarioInterface", &tcPlatformInterface::GetScenarioInterface)
        .def("AddUnitToFlightDeck", &tcPlatformInterface::AddUnitToFlightDeck)
        .def("SetAirGroupName", &tcPlatformInterface::SetAirGroupName)
        .def("GetAirGroupName", &tcPlatformInterface::GetAirGroupName)
        .def("GetAirUnitId", &tcPlatformInterface::GetAirUnitId)
        .def("SetAirGroupCount", &tcPlatformInterface::SetAirGroupCount)
        .def("GetAirGroupCount", &tcPlatformInterface::GetAirGroupCount)
        .def("SetMagazineAddCount", &tcPlatformInterface::SetMagazineAddCount)
        .def("GetMagazineAddCount", &tcPlatformInterface::GetMagazineAddCount)
        .def("SetIncludeProbability", &tcPlatformInterface::SetIncludeProbability)
        .def("GetIncludeProbability", &tcPlatformInterface::GetIncludeProbability)
        .def("AddRandomBox", &tcPlatformInterface::AddRandomBox)
        .def("DeleteAllRandomBoxes", &tcPlatformInterface::DeleteAllRandomBoxes)
        //        .def("UpdateMissionEditGraphics", &tcPlatformInterface::UpdateMissionEditGraphics)
        .def("SetAlwaysVisible", &tcPlatformInterface::SetAlwaysVisible)
        .def("GetAlwaysVisible", &tcPlatformInterface::GetAlwaysVisible)
        .def("SetFuelTest", &tcPlatformInterface::SetFuelTest)
        .def("GetCost", &tcPlatformInterface::GetCost)
        .def("SetCost", &tcPlatformInterface::SetCost)
        ;
    py::class_<tcTrack>(m,"tcTrack")
        .def_readwrite("Alt",&tcTrack::mfAlt_m)
        .def_readwrite("Lat",&tcTrack::mfLat_rad)
        .def_readwrite("Lon",&tcTrack::mfLon_rad)
        .def_readonly("Speed",&tcTrack::mfSpeed_kts)
        .def_readonly("Flags", &tcTrack::mnFlags)
        .def_readonly("Heading_rad",&tcTrack::mfHeading_rad)
        .def_readonly("Bearing_rad", &tcTrack::bearing_rad)
        .def_readonly("BearingRate_radps", &tcTrack::bearingRate_radps)
        .def_readonly("Classification",&tcTrack::mnClassification)
        .def_readonly("Affiliation",&tcTrack::mnAffiliation)
        .def_readonly("ID",&tcTrack::mnID)
        .def_readonly("Time", &tcTrack::mfTimestamp)
        .def("IsAir", &tcTrack::IsAir)
        .def("IsMissile", &tcTrack::IsMissile)
        .def("IsSurface", &tcTrack::IsSurface)
        .def("IsGround", &tcTrack::IsGround)
        .def("IsSub", &tcTrack::IsSub)
        .def("IsTorpedo", &tcTrack::IsTorpedo)
        .def("IsBearingOnly", &tcTrack::IsBearingOnly)
        .def("IsBearingRateValid", &tcTrack::IsBearingRateValid)
        .def("IsValid", &tcTrack::IsValid)
        .def("Offset", &tcTrack::Offset)
        .def("PredictAhead", &tcTrack::PredictAhead)
        ;



    py::class_<tcSensorMapTrack>(m,"tcSMTrack")
        .def_readwrite("Alt",&tcSensorMapTrack::mfAlt_m)
        .def_readwrite("Lat",&tcSensorMapTrack::mfLat_rad)
        .def_readwrite("Lon",&tcSensorMapTrack::mfLon_rad)
        .def_readonly("Speed",&tcSensorMapTrack::mfSpeed_kts)
        .def_readonly("Flags", &tcSensorMapTrack::mnFlags)
        .def_readonly("Heading_rad",&tcSensorMapTrack::mfHeading_rad)
        .def_readonly("Bearing_rad", &tcSensorMapTrack::bearing_rad)
        .def_readonly("BearingRate_radps", &tcSensorMapTrack::bearingRate_radps)
        .def_readonly("Classification",&tcSensorMapTrack::mnClassification)
        .def_readonly("Affiliation",&tcSensorMapTrack::mnAffiliation)
        .def_readonly("ID",&tcSensorMapTrack::mnID)
        .def_readonly("Time", &tcSensorMapTrack::mfTimestamp)
        .def("IsAir", &tcSensorMapTrack::IsAir)
        .def("IsDestroyed", &tcSensorMapTrack::IsDestroyed)
        .def("IsMissile", &tcSensorMapTrack::IsMissile)
        .def("IsSurface", &tcSensorMapTrack::IsSurface)
        .def("IsGround", &tcSensorMapTrack::IsGround)
        .def("IsSub", &tcSensorMapTrack::IsSub)
        .def("IsTorpedo", &tcSensorMapTrack::IsTorpedo)
        .def("IsBearingOnly", &tcSensorMapTrack::IsBearingOnly)
        .def("IsBearingRateValid", &tcSensorMapTrack::IsBearingRateValid)
        .def("IsStale", &tcSensorMapTrack::IsStale)
        .def("IsValid", &tcSensorMapTrack::IsValid)
        .def("Offset", &tcSensorMapTrack::Offset)
        .def("PredictAhead", &tcSensorMapTrack::PredictAhead)
        .def("GetEngagedCount", &tcSensorMapTrack::GetEngagedCount)
        .def("GetEmitterCount", &tcSensorMapTrack::GetEmitterCount)
        .def("GetEmitterInfo",  &tcSensorMapTrack::GetEmitterInfo)
        .def("TrackErrorKm", &tcSensorMapTrack::TrackErrorKm)
        .def("BearingToRad", &tcSensorMapTrack::BearingToRad)
        .def("RangeToKm", &tcSensorMapTrack::RangeToKm)
        .def("GetTrackLife", &tcSensorMapTrack::GetTrackLife)
        ;


    py::class_<tcTrackIterator>(m,"TrackIterator")
        .def_readonly("Alt",&tcTrackIterator::mfAlt_m)
        .def_readonly("Lat",&tcTrackIterator::mfLat_rad)
        .def_readonly("Lon",&tcTrackIterator::mfLon_rad)
        .def_readonly("Speed",&tcTrackIterator::mfSpeed_kts)
        .def_readonly("Heading_rad",&tcTrackIterator::mfHeading_rad)
        .def_readonly("Classification",&tcTrackIterator::mnClassification)
        .def_readonly("Affiliation",&tcTrackIterator::mnAffiliation)
        .def_readonly("ID",&tcTrackIterator::mnID)
        .def_readonly("Key",&tcTrackIterator::mnKey)
        ;

    py::class_<tcTrackList>(m,"TrackList")
        .def("Size",&tcTrackList::Size)
        .def("GetTrack",&tcTrackList::GetTrack)
        ;

    py::class_<tcFormationPosition>(m,"FormationPosition")
        .def_readwrite("range_km",&tcFormationPosition::range_km)
        .def_readwrite("span_km",&tcFormationPosition::span_km)
        .def_readwrite("bearing_rad",&tcFormationPosition::bearing_rad)
        .def_readwrite("span_rad",&tcFormationPosition::span_rad)
        ;

    py::class_<GeoPoint>(m,"GeoPoint")
        .def_readonly("Alt",&GeoPoint::mfAlt_m)
        .def_readonly("Lon",&GeoPoint::mfLon_rad)
        .def_readonly("Lat",&GeoPoint::mfLat_rad)
        ;

    py::class_<tcLauncherInfo>(m,"LauncherInfo")
        .def_readonly("Launcher",&tcLauncherInfo::mnLauncher)   // index of launcher, or -1 for none
        .def_readonly("Quantity",&tcLauncherInfo::mnQuantity)
        .def_readonly("TargetFlags",&tcLauncherInfo::mnTargetFlags) // 0x01 - surface, 0x02 - air, 0x04 - land
        .def_readonly("Range_km",&tcLauncherInfo::mfRange_km)
        .def_readonly("MinLaunchAlt_m", &tcLauncherInfo::minLaunchAlt_m)
        .def_readonly("MaxLaunchAlt_m", &tcLauncherInfo::maxLaunchAlt_m)
        .def_readonly("MinRange_km", &tcLauncherInfo::minRange_km)
        .def_readonly("MaxRange_km", &tcLauncherInfo::maxRange_km)
        .def_readonly("LaunchMode",&tcLauncherInfo::mnLaunchMode)  // 0 - datum, 1 - handoff
        .def_readonly("MaxDepth_m",&tcLauncherInfo::maxDepth_m)
        .def_readonly("Speed_mps", &tcLauncherInfo::speed_mps)
        .def_readonly("SectorCenter", &tcLauncherInfo::sectorCenter)
        .def_readonly("SectorWidth", &tcLauncherInfo::sectorWidth)
        .def_readonly("FireControlTracks", &tcLauncherInfo::fireControlTracks)
        .def_readonly("MaxFireControlTracks", &tcLauncherInfo::maxFireControlTracks)
        .def_readonly("IsNuclear", &tcLauncherInfo::isNuclear)
        .def_readonly("IsLoading", &tcLauncherInfo::isLoading)
        .def_readonly("AcceptsWaypoints", &tcLauncherInfo::acceptsWaypoints)
        .def_readonly("LifeTime_s", &tcLauncherInfo::lifeTime_s)
        .def_readonly("Status", &tcLauncherInfo::launcherStatus)
        .def("IsValid", &tcLauncherInfo::IsValid)
        ;

    py::class_<tcSensorInfo>(m,"SensorInfo")
        .def_readonly("isActive",&tcSensorInfo::isActive)
        .def_readonly("type",&tcSensorInfo::type)
        .def("IsPassive", &tcSensorInfo::IsPassive)
        ;

    py::class_<tcFireControlInfo>(m,"FireControlInfo")
        .def_readonly("radarGuidanceActive", &tcFireControlInfo::radarGuidanceActive)
        .def_readonly("maxLeft_deg", &tcFireControlInfo::maxLeft_deg)
        .def_readonly("maxRight_deg", &tcFireControlInfo::maxRight_deg)
        .def_readonly("weaponsOut", &tcFireControlInfo::weaponsOut)
        ;

    py::class_<EmitterInfo>(m,"EmitterInfo")
        .def_readonly("EmitterID", &EmitterInfo::mnEmitterID)
        .def_readonly("Timestamp", &EmitterInfo::mfTimestamp)
        .def_readonly("Mode", &EmitterInfo::mnMode)
        .def("GetEmitterName", &EmitterInfo::GetEmitterName)
        ;

    py::class_<tcGroupInterface>(m,"GroupInterfaceClass")
        .def(py::init<>())
        .def("GetPlatformInterface", &tcGroupInterface::GetPlatformInterface)
        .def("GetWeaponInterface", &tcGroupInterface::GetWeaponInterface)
        .def("GetUnitCount", &tcGroupInterface::GetUnitCount)
        .def("GetUnitId", &tcGroupInterface::GetUnitId)
        .def("IsPlatform", &tcGroupInterface::IsPlatform)
        .def("IsWeapon", &tcGroupInterface::IsWeapon)
        .def("GetTankerList", &tcGroupInterface::GetTankerList)
        .def("LookupUnit", &tcGroupInterface::LookupUnit)
        .def("LookupUnitIdx", &tcGroupInterface::LookupUnitIdx)
        .def("TakeControl", &tcGroupInterface::TakeControl)
        .def("ReleaseControl", &tcGroupInterface::ReleaseControl)
        .def("GetUserInput", &tcGroupInterface::GetUserInput)
        .def("GetScenarioInterface", &tcGroupInterface::GetScenarioInterface);

    py::class_<tcSubInterface>(m,"SubInterfaceClass")
        .def("GetBatteryFraction", &tcSubInterface::GetBatteryFraction)
        .def("GetMaxDepth", &tcSubInterface::GetMaxDepth)
        .def("GoToPeriscopeDepth", &tcSubInterface::GoToPeriscopeDepth)
        .def("IsAtPeriscopeDepth", &tcSubInterface::IsAtPeriscopeDepth)
        .def("IsDieselElectric", &tcSubInterface::IsDieselElectric)
        .def("IsPeriscopeRaised", &tcSubInterface::IsPeriscopeRaised)
        .def("IsRadarMastRaised", &tcSubInterface::IsRadarMastRaised)
        .def("IsSnorkeling", &tcSubInterface::IsSnorkeling)
        .def("IsValid", &tcSubInterface::IsValid)
        .def("LowerPeriscope", &tcSubInterface::LowerPeriscope)
        .def("LowerRadarMast", &tcSubInterface::LowerRadarMast)
        .def("RaisePeriscope", &tcSubInterface::RaisePeriscope)
        .def("RaiseRadarMast", &tcSubInterface::RaiseRadarMast)
        .def("SetSnorkelState", &tcSubInterface::SetSnorkelState)
        .def("GetCavitatingSpeed", &tcSubInterface::GetCavitatingSpeed)
        ;


    py::class_<tcTrackInterface>(m,"TrackInterfaceClass")
        .def(py::init<>())
        .def("DeclareHostile", &tcTrackInterface::DeclareHostile)
        .def("DeclareNeutral", &tcTrackInterface::DeclareNeutral)
        .def("DeclareFriendly", &tcTrackInterface::DeclareFriendly)
        .def("DropTrack", &tcTrackInterface::DropTrack)
        .def("UpdateAmbiguityList", &tcTrackInterface::UpdateAmbiguityList)
        ;
    py::class_<tcWeaponInterface>(m,"WeaponInterface")
        .def(py::init<>())
        .def("IsValid", &tcWeaponInterface::IsValid)
        .def("GetWeaponType", &tcWeaponInterface::GetWeaponType)
        .def("IsLinkActive", &tcWeaponInterface::IsLinkActive)
        .def("UpdateTargetPosition", &tcWeaponInterface::UpdateTargetPosition)
        .def("DisplayMessage", &tcWeaponInterface::DisplayMessage)
        .def("GetPlatformName", &tcWeaponInterface::GetPlatformName)
        .def("GetPlatformClass", &tcWeaponInterface::GetPlatformClass)
        .def("GetPlatformAlliance", &tcWeaponInterface::GetPlatformAlliance)
        .def("GetLongitude", &tcWeaponInterface::GetLongitude)
        .def("GetLatitude", &tcWeaponInterface::GetLatitude)
        .def("GetAltitude", &tcWeaponInterface::GetAltitude)
        .def("GetHeading", &tcWeaponInterface::GetHeading)
        .def("GetSpeed", &tcWeaponInterface::GetSpeed)
        .def("DeletePlatform", &tcWeaponInterface::DeletePlatform)
        .def("MovePlatform", &tcWeaponInterface::MovePlatform)
        .def("RenamePlatform", &tcWeaponInterface::RenamePlatform)
        .def("GetScenarioInterface", &tcWeaponInterface::GetScenarioInterface)
        .def("GetLocalObj", &tcWeaponInterface::GetLocalObj)
        ;


    py::class_<tcDatum>(m,"Datum")
        .def_readwrite("lat",&tcDatum::lat)
        .def_readwrite("lon",&tcDatum::lon)
        .def_readwrite("alt",&tcDatum::alt)
        ;

    py::class_<tcScenarioUnit>(m,"ScenarioUnit")
        .def_readwrite("className",&tcScenarioUnit::className)
        .def_readwrite("unitName",&tcScenarioUnit::unitName)
        .def_readwrite("lat",&tcScenarioUnit::lat)
        .def_readwrite("lon",&tcScenarioUnit::lon)
        .def_readwrite("alt",&tcScenarioUnit::alt)
        .def_readwrite("heading",&tcScenarioUnit::heading)
        .def_readwrite("speed",&tcScenarioUnit::speed)
        .def_readwrite("throttle",&tcScenarioUnit::throttle)
        .def_readwrite("cost",&tcScenarioUnit::cost)
        .def("SetPosition",&tcScenarioUnit::SetPosition)
        .def("SetOrbit",&tcScenarioUnit::SetOrbit)
        ;

    py::class_<tcStringArray>(m,"StringArray")
        .def("Size", &tcStringArray::Size)
        .def("GetString", &tcStringArray::GetString)
        .def("PushBack", &tcStringArray::PushBack)
        ;

    py::class_<tcStringTable>(m,"StringTable")
        .def("Size", &tcStringTable::Size)
        .def("GetStringArray", &tcStringTable::GetStringArray)
        .def("GetRow", &tcStringTable::GetStringArray)
        .def("GetString", &tcStringTable::GetString)
        .def("PushBack", &tcStringTable::PushBack)
        ;

    py::class_<tcParsedUnitName>(m,"ParsedUnitName")
        .def_readwrite("isValid", &tcParsedUnitName::isValid)
        .def_readwrite("root", &tcParsedUnitName::root)
        .def_readwrite("separator", &tcParsedUnitName::separator)
        .def_readwrite("id", &tcParsedUnitName::id)
        ;

    py::class_<tcAllianceROEInfo>(m,"AllianceROEInfo")
        .def_readwrite("AirROE", &tcAllianceROEInfo::airROE)
        .def_readwrite("SurfaceROE", &tcAllianceROEInfo::surfaceROE)
        .def_readwrite("SubROE", &tcAllianceROEInfo::subROE)
        .def_readwrite("LandROE", &tcAllianceROEInfo::landROE)
        ;


    py::class_<tcScenarioInterface>(m,"ScenarioInterface")
        .def(py::init<>())
        .def("AddUnitToAlliance",&tcScenarioInterface::AddUnitToAlliance)
        .def("AddUnitToFlightDeck",&tcScenarioInterface::AddUnitToFlightDeck)
        .def("AddUnitTask", &tcScenarioInterface::AddUnitTask)
        .def("AddToUnitMagazine",&tcScenarioInterface::AddToUnitMagazine)
        .def("GetUnitInterface", &tcScenarioInterface::GetUnitInterface)
        .def("GetUnitNameById", &tcScenarioInterface::GetUnitNameById)
        .def("GetUnitIdByName", &tcScenarioInterface::GetUnitIdByName)
        .def("SetUnitLauncherItem",&tcScenarioInterface::SetUnitLauncherItem)
        .def("SetFlightDeckUnitLoadout", &tcScenarioInterface::SetFlightDeckUnitLoadout)
        .def("SetUnitAlwaysVisibleState", &tcScenarioInterface::SetUnitAlwaysVisibleState)

        .def("AllianceExists", &tcScenarioInterface::AllianceExists)
        .def("CreateAlliance",&tcScenarioInterface::CreateAlliance)
        .def("SetAllianceRelationship", &tcScenarioInterface::SetAllianceRelationship)
        .def("GetAllianceRelationship", &tcScenarioInterface::GetAllianceRelationship)
        .def("SetAllianceDefaultCountry", &tcScenarioInterface::SetAllianceDefaultCountry)
        .def("GetAllianceCountry", &tcScenarioInterface::GetAllianceCountry)
        .def("SetAlliancePlayable", &tcScenarioInterface::SetAlliancePlayable)
        .def("IsAlliancePlayable", &tcScenarioInterface::IsAlliancePlayable)
        .def("GetAllianceROE", &tcScenarioInterface::GetAllianceROE)
        .def("SetAllianceROE", &tcScenarioInterface::SetAllianceROE)
        .def("SetAllianceROEByType", &tcScenarioInterface::SetAllianceROEByType)
        .def("GetDefaultUnit",&tcScenarioInterface::GetDefaultUnit)
        .def("GetRandomDatum",&tcScenarioInterface::GetRandomDatum)
        .def("GetRandomPlatformName", &tcScenarioInterface::GetRandomPlatformName)
        .def("GetParsedUnitName", &tcScenarioInterface::GetParsedUnitName)
        .def("GetUserAlliance", &tcScenarioInterface::GetUserAlliance)
        .def("SaveGame", &tcScenarioInterface::SaveGame)
        .def("SetAllianceGoal",&tcScenarioInterface::SetAllianceGoal)
        .def("GetAllianceGoal",&tcScenarioInterface::GetAllianceGoal)
        .def("GetGoalById",&tcScenarioInterface::GetGoalById)
        .def("AddChildGoalToId", &tcScenarioInterface::AddChildGoalToId)
        .def("DeleteGoalById", &tcScenarioInterface::DeleteGoalById)
        .def("SetDateTime",&tcScenarioInterface::SetDateTime)
        .def("SetDateTimeByString",&tcScenarioInterface::SetDateTimeByString)
        .def("GetScenarioDateAsString",&tcScenarioInterface::GetScenarioDateAsString)
        .def("SetPerfectScore",&tcScenarioInterface::SetPerfectScore)
        .def("SetScenarioDescription",&tcScenarioInterface::SetScenarioDescription)
        .def("SetScenarioLoaded",&tcScenarioInterface::SetScenarioLoaded)
        .def("SetScenarioName",&tcScenarioInterface::SetScenarioName)
        .def("SetScenarioLocked", &tcScenarioInterface::SetScenarioLocked)
        .def("DuplicateUnitTasking", &tcScenarioInterface::DuplicateUnitTasking)
        .def("IsUsingNATONames", &tcScenarioInterface::IsUsingNATONames)
        .def("GetDisplayName", &tcScenarioInterface::GetDisplayName)
        .def("GetUnitList", &tcScenarioInterface::GetUnitList)

        .def("SetStartTheater", &tcScenarioInterface::SetStartTheater)
        .def("SetUserAlliance",&tcScenarioInterface::SetUserAlliance)
        // time/mode events
        //                  .def("ClearEvents",&tcScenarioInterface::ClearEvents)
        //                  .def("HookPlatform",&tcScenarioInterface::HookPlatform)
        //                  .def("Pause",&tcScenarioInterface::Pause)
        //                  .def("Resume",&tcScenarioInterface::Resume)
        //                  .def("Set3DMode",&tcScenarioInterface::Set3DMode)
        //                  .def("SetBriefingMode",&tcScenarioInterface::SetBriefingMode)
        //                  .def("SetEventTime",&tcScenarioInterface::SetEventTime)
        //                  // audio events
        //                  .def("PauseAudio",&tcScenarioInterface::PauseAudio)
        //                  .def("PlayAudio",&tcScenarioInterface::PlayAudio)
        //                  .def("PlayEffect",&tcScenarioInterface::PlayEffect)
        //                  .def("SeekAudio",&tcScenarioInterface::SeekAudio)
        // send command
        //            .def("SendCommand", &tcScenarioInterface::SendCommand)
        // text console and map events
        //                  .def("ChangeMapView",&tcScenarioInterface::ChangeMapView)
        //                  .def("ChangeWorldMapView",&tcScenarioInterface::ChangeWorldMapView)
        //                  .def("SetStartView",&tcScenarioInterface::SetStartView)
        //                .def("ChangeMapTheater",&tcScenarioInterface::ChangeMapTheater)
        //                  .def("ConsoleText",&tcScenarioInterface::ConsoleText)
        //                  .def("ChannelMessage", &tcScenarioInterface::ChannelMessage)
        //                  .def("MapText",&tcScenarioInterface::MapText)
        //                  // overlay graphics
        //                  .def("OverlayText", &tcScenarioInterface::OverlayText)
        //                  .def("OverlayTextInteractive", &tcScenarioInterface::OverlayTextInteractive)
        //                  // camera and 3D viewer events
        //                  .def("FlybyCamera",&tcScenarioInterface::FlybyCamera)
        //                  .def("TrackCamera",&tcScenarioInterface::TrackCamera)
        //                  .def("Text3D",&tcScenarioInterface::Text3D)
        // goal creation workaround
        .def("CompoundGoal",&tcScenarioInterface::CompoundGoal)
        .def("TimeGoal",&tcScenarioInterface::TimeGoal)
        .def("DestroyGoal",&tcScenarioInterface::DestroyGoal)
        .def("ProtectGoal",&tcScenarioInterface::ProtectGoal)
        .def("AreaGoal",&tcScenarioInterface::AreaGoal)
        // simple briefing text
        .def("SetSimpleBriefing", &tcScenarioInterface::SetSimpleBriefing)
        // database query
        .def("GetPlatformListByClass", &tcScenarioInterface::GetPlatformListByClass)
        .def("SetFilterByYear", &tcScenarioInterface::SetFilterByYear)
        .def("GetFilterByYear", &tcScenarioInterface::GetFilterByYear)
        .def("SetFilterByCountry", &tcScenarioInterface::SetFilterByCountry)
        .def("GetFilterByCountry", &tcScenarioInterface::GetFilterByCountry)
        .def("QueryDatabase", &tcScenarioInterface::QueryDatabase)

        // database management
        .def("LoadDatabaseMod", &tcScenarioInterface::LoadDatabaseMod)
        .def("RestoreDefaultDatabase", &tcScenarioInterface::RestoreDefaultDatabase)

        // more scenario edit commands, started Oct 2008
        .def("SetAirGroupName", &tcScenarioInterface::SetAirGroupName)
        .def("GetAirGroupName", &tcScenarioInterface::GetAirGroupName)
        .def("GetAirUnitId", &tcScenarioInterface::GetAirUnitId)
        .def("SetAirGroupCount", &tcScenarioInterface::SetAirGroupCount)
        .def("GetAirGroupCount", &tcScenarioInterface::GetAirGroupCount)
        .def("SetMagazineAddCount", &tcScenarioInterface::SetMagazineAddCount)
        .def("GetMagazineAddCount", &tcScenarioInterface::GetMagazineAddCount)

        // scenario randomization commands
        .def("SetIncludeProbability", &tcScenarioInterface::SetIncludeProbability)
        .def("IncludeUnit", &tcScenarioInterface::IncludeUnit)
        .def("AddRandomBox", &tcScenarioInterface::AddRandomBox)

        // sonar
        .def("SetSeaState", &tcScenarioInterface::SetSeaState)
        .def("GetSeaState", &tcScenarioInterface::GetSeaState)
        .def("SetSVP", &tcScenarioInterface::SetSVP)
        .def("SetSonarTemplate", &tcScenarioInterface::SetSonarTemplate)
        .def("GetSonarTemplate", &tcScenarioInterface::GetSonarTemplate)
        .def("GetNumberSonarTemplates", &tcScenarioInterface::GetNumberSonarTemplates)
        .def("GetTemplateName", &tcScenarioInterface::GetTemplateName)
        .def("SetEditMode", &tcScenarioInterface::SetEditMode)
        .def("SetTimeAccel", &tcScenarioInterface::SetTimeAccel)
        .def("ClearScenario", &tcScenarioInterface::ClearScenario)
        .def("LoadScenario", &tcScenarioInterface::LoadScenario)
        ;

    py::class_<ScriptedTaskInterface>(m,"ScriptedTaskInterface")
        .def(py::init<>())
        .def("EndTask", &ScriptedTaskInterface::EndTask)
        .def("GetBlackboardInterface", &ScriptedTaskInterface::GetBlackboardInterface)
        .def("GetPlatformInterface", &ScriptedTaskInterface::GetPlatformInterface)
        .def("SetUpdateInterval", &ScriptedTaskInterface::SetUpdateInterval)
        .def("SetTaskAttributes", &ScriptedTaskInterface::SetTaskAttributes)
        .def("GetMemoryText", &ScriptedTaskInterface::GetMemoryText)
        .def("SetMemoryText", &ScriptedTaskInterface::SetMemoryText)
        .def("GetMemoryValue", &ScriptedTaskInterface::GetMemoryValue)
        .def("SetMemoryValue", &ScriptedTaskInterface::SetMemoryValue)
        ;

    py::class_<tcGoal>(m,"Goal")
        .def_readwrite("goalState",&tcGoal::goalState)
        .def("SetScores",&tcGoal::SetScores)
        .def("GetId", &tcGoal::GetId)
        ;

    //PyDict_SetItemString(dictionary->ptr(), "goalx", GoalType.ptr());  // does not work right


    py::class_<tcCompoundGoal, tcGoal>(m,"CompoundGoal")
        .def(py::init<int>())
        .def_readwrite("logicType", &tcCompoundGoal::logicType)
        .def("AddGoal",&tcCompoundGoal::AddGoal)
        .def("RemoveGoal",&tcCompoundGoal::RemoveGoal)
        .def("SetLogic",&tcCompoundGoal::SetLogic)
        .def("GetSubGoalCount", &tcCompoundGoal::GetSubGoalCount)
        .def("GetSubGoal", &tcCompoundGoal::GetSubGoal)
        ;

    py::class_<tcTimeGoal, tcGoal>(m,"TimeGoal")
        .def_readwrite("failTimeout", &tcTimeGoal::failTimeout)
        .def_readwrite("passTimeout", &tcTimeGoal::passTimeout)
        .def("SetFailTimeout",&tcTimeGoal::SetFailTimeout)
        .def("SetPassTimeout",&tcTimeGoal::SetPassTimeout)
        ;


    py::class_<tcDestroyGoal, tcGoal >(m,"DestroyGoal" )
        .def(py::init<const std::string &>())
        .def("GetTargetCount", &tcDestroyGoal::GetTargetCount)
        .def("GetTargetName", &tcDestroyGoal::GetTargetName)
        .def("GetQuantity", &tcDestroyGoal::GetQuantity)
        .def("SetQuantity", &tcDestroyGoal::SetQuantity)
        .def("AddTarget", &tcDestroyGoal::AddTarget)
        .def("RemoveTarget", &tcDestroyGoal::RemoveTarget)
        ;


    py::class_<tcProtectGoal, tcGoal >(m,"ProtectGoal")
        .def(py::init<const std::string &>())
        .def("GetTargetCount", &tcProtectGoal::GetTargetCount)
        .def("GetTargetName", &tcProtectGoal::GetTargetName)
        .def("GetQuantity", &tcProtectGoal::GetQuantity)
        .def("SetQuantity", &tcProtectGoal::SetQuantity)
        .def("AddTarget", &tcProtectGoal::AddTarget)
        .def("RemoveTarget", &tcProtectGoal::RemoveTarget)
        ;


    py::class_<tcAreaGoal,tcGoal >(m,"AreaGoal")
        .def("AddPoint", &tcAreaGoal::AddPoint)
        .def("AddPointDeg", &tcAreaGoal::AddPointDeg)
        .def("SetEnterGoal", &tcAreaGoal::SetEnterGoal)
        .def("SetTargetList", &tcAreaGoal::SetTargetList)
        .def("AddToTargetList", &tcAreaGoal::AddToTargetList)
        .def("SetQuantity", &tcAreaGoal::SetQuantity)
        .def("GetQuantity", &tcAreaGoal::GetQuantity)
        .def("SetTimeObjective", &tcAreaGoal::SetTimeObjective)
        .def("GetTimeObjective", &tcAreaGoal::GetTimeObjective)
        .def("SetLogicAny", &tcAreaGoal::SetLogicAny)
        .def("IsLogicAny", &tcAreaGoal::IsLogicAny)
        ;


    py::class_<tcGoalWrap>(m,"GoalWrap")
        .def("GetId", &tcGoalWrap::GetId)
        .def("GetTypeString", &tcGoalWrap::GetTypeString)
        .def("AsCompoundGoal", &tcGoalWrap::AsCompoundGoal)
        .def("AsTimeGoal", &tcGoalWrap::AsTimeGoal)
        .def("AsDestroyGoal", &tcGoalWrap::AsDestroyGoal)
        .def("AsProtectGoal", &tcGoalWrap::AsProtectGoal)
        .def("AsAreaGoal", &tcGoalWrap::AsAreaGoal)
        ;


    py::class_<tcCompoundGoalWrap>(m,"CompoundGoalWrap")
        .def("AddGoal", &tcCompoundGoalWrap::AddGoal)
        .def("GetLogicType", &tcCompoundGoalWrap::GetLogicType)
        .def("SetLogicType", &tcCompoundGoalWrap::SetLogicType)
        .def("GetSubGoalCount", &tcCompoundGoalWrap::GetSubGoalCount)
        .def("GetSubGoal", &tcCompoundGoalWrap::GetSubGoal)
        .def("GetId", &tcCompoundGoalWrap::GetId)
        ;


    py::class_<tcTimeGoalWrap>(m,"TimeGoalWrap")
        .def("GetFailTimeout", &tcTimeGoalWrap::GetFailTimeout)
        .def("SetFailTimeout", &tcTimeGoalWrap::SetFailTimeout)
        .def("GetPassTimeout", &tcTimeGoalWrap::GetPassTimeout)
        .def("SetPassTimeout", &tcTimeGoalWrap::SetPassTimeout)
        .def("GetId", &tcTimeGoalWrap::GetId)
        ;


    py::class_<tcDestroyGoalWrap>(m,"DestroyGoalWrap")
        .def("AddTarget", &tcDestroyGoalWrap::AddTarget)
        .def("RemoveTarget", &tcDestroyGoalWrap::RemoveTarget)
        .def("SetQuantity", &tcDestroyGoalWrap::SetQuantity)
        .def("GetQuantity", &tcDestroyGoalWrap::GetQuantity)
        .def("GetTargetCount", &tcDestroyGoalWrap::GetTargetCount)
        .def("GetTargetName", &tcDestroyGoalWrap::GetTargetName)
        .def("GetId", &tcDestroyGoalWrap::GetId)
        ;


    py::class_<tcProtectGoalWrap>(m,"ProtectGoalWrap")
        .def("AddTarget", &tcProtectGoalWrap::AddTarget)
        .def("RemoveTarget", &tcProtectGoalWrap::RemoveTarget)
        .def("SetQuantity", &tcProtectGoalWrap::SetQuantity)
        .def("GetQuantity", &tcProtectGoalWrap::GetQuantity)
        .def("GetTargetCount", &tcProtectGoalWrap::GetTargetCount)
        .def("GetTargetName", &tcProtectGoalWrap::GetTargetName)
        .def("GetId", &tcProtectGoalWrap::GetId)
        ;


    py::class_<tcAreaGoalWrap>(m,"AreaGoalWrap")
        .def("GetTargetString", &tcAreaGoalWrap::GetTargetString)
        .def("SetTargetList", &tcAreaGoalWrap::SetTargetList)
        .def("AddToTargetList", &tcAreaGoalWrap::AddToTargetList)
        .def("SetQuantity", &tcAreaGoalWrap::SetQuantity)
        .def("GetQuantity", &tcAreaGoalWrap::GetQuantity)
        .def("GetId", &tcAreaGoalWrap::GetId)
        .def("Clear", &tcAreaGoalWrap::Clear)
        .def("AddPoint", &tcAreaGoalWrap::AddPoint)
        .def("AddPointDeg", &tcAreaGoalWrap::AddPointDeg)
        .def("SetEnterGoal", &tcAreaGoalWrap::SetEnterGoal)
        .def("GetEnterGoal", &tcAreaGoalWrap::GetEnterGoal)
        .def("SetTimeObjective", &tcAreaGoalWrap::SetTimeObjective)
        .def("GetTimeObjective", &tcAreaGoalWrap::GetTimeObjective)
        .def("SetLogicAny", &tcAreaGoalWrap::SetLogicAny)
        .def("IsLogicAny", &tcAreaGoalWrap::IsLogicAny)
        ;


}
